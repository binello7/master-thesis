[file]
03_Presentation.pdf
[notes]
### 1
OUTLINE
* As you have seen from the title my presentation is about emulation.
* So we'll begin by having a closer look at what emulation actually is and what potential it has.
* We'll continue by brifly exploring the tools need for emulating, and in particular the tools I used.
* We will then have a closer look at two applications of emulation: a more didactic one and an applied one.
* I'll then draw my conclusions and give my point of view about possible future applications of emulation for flood prediction.
### 2
Goals
here my goals
- goal 21
- goal 2

### 3
Emulation
### 4
Machine Learning
### 5
Beginning case studies
### 6
Intro CS 1
* In this first case study we want to fit the weir equation to simulated data.
* In a while we will see what relation this has with emulation and machine learning.
* The weir equation can be derived analytically by assuming no friction losses and 
  a uniform velocity distribution.
* Results obtained are for a theoretical discharge, which diverges from empirical results, where
  the assumption mentioned don't hold.
* In order to obtain actual discharge a correction factor \mu has to be taken into account.
* \mu is dependent on the type and shape of weir (broad-crested/narrow-crested) and which
  particular shape.
* To obtain the value of this coefficient the equation has to be fitted to 
  experimental data.
* Here below some \mu-values for some weir types are shown
### 7
Set-up CS 1
### 8
Simulation results CS 1
### 9
Fitting results CS 1
* 3 different fittings were done
* Weir equation follows a power law, therefore the logarithm of the data was taken
  and a linear regression was performed with all data.
  values of \mu = 0.56 and a = 1.59 were found.
* A linear interpolation was performed. performs very bad at the beginning (few points),
  but quite good afterwards (almost overlaying).
* A spline interpolation was performed. This performs good even between points
  1 and 2 (almost overlaying).
* I wanted to test the robustness of the different methods
* I took a subset of the training dataset (14 points, otherwise computation too long) and
  performed cross-validation leaving out 1, 2, ... up to 10 points.
* Every time all possible combination of left-out points were tested and the
  mean squared error was computed.
* The plot shows the mean of the mean squared errors of all possible subsets by
  leaving out 1, 2, ... 10 points.
* When 10 points were left out just 4 were used for training: 1st, last + 2 random points.
* From the plot we see some interesting features:
* The  linear fit always performs the worst, although not even that bad: RMSE of ~2cm
  leaving out 1 point.
* The spline fit performs very good, better than the weir equation model thanks to its
* very high flexibility. However, its error increases very rapidly by reducing
  the number of training points. There is no prior knowledge encoded in the spline model,
  it is just a fit to the data. When there are few training points the spline can move
  very freely in between, and get far from the points generated by the process.
* With 9 and 10 points left out the spline model performs worse than the weir equation model.
* The weir equation encodes prior knowledge: the physics of the process.
* The error here grows very slowly, the model performs very well even if trained on 4 points, 
  and here actually better than the spline model.
* Take home message: if we have knowledge about the process we don't need data
### 10
Intro CS 2
* Building an emulator to estimate the time to threshold:
  Our hydraulic structures (bridges, embankments, ...) have thresholds for which they were
  sized. If those thresholds are exceeded, then the structure cannot fulfill its function.
* Measures have to be taken in this case, build up temporary flood-blocking barriers,
  evacuate people, etc.
* We want to build up an emulator able, for a given catchment, knowing the rain intensity
  over the catchment and the initial moisture content of its soil, to estimate after how long
  the threshold discharge value at its outlet will be exceeded.
* Such an emulator could for example be used as an early flood warning system
### 11
Set-up CS 2
* For this case study the synthetic topography that you see here was created using
  the open source tool "GNU Octave"
* This represents a catchment of 2 km x 2 km and is composed of three "Gaussian bumps"
  on a sloping plane. The three Gaussian bumps generate a Y-shaped channel which goes
  from the top of the catchment up to the bottom.
* The synthetic topography presents a surface which is very smooth. This way a coarse
  grid resolution can be used, without having loss of important features.
* As for the first case study, the simulator "FullSWOF_2D" was used for running the simulations.
* 50 different rain events were simulated on this topography.
* Every simulated rain event is distinguished by a different combination of the parameters
  initial soil moisture content and rain intensity. 
* All of the other simulation parameters were kept the same.
* A linearly spaced grid was used for the parameters sampling:
* 10 Rain intensity values were taken in the interval \[10, 35\] mm/h and 5 initial
  moisture content values were taken in the interval \[0, 1\].
* The rain event duration was set to 6 hours and the simulation duration to 9.
* This is in order to observe the behavior after the rain has stopped.
* The domain boundary conditions were set to "wall boundary condition", except from the lower one.
* This way water can only outflow through the lower boundary.
* Spatially distributed parameters such as Manning coefficients, hydraulic conductivity and maximum
  infiltration rate were kept uniform over the domain.
* The initial soil moisture content was also applied uniformly to the domain.
### 12
Simulation results CS 2
* Here we can see the results extracted from the simulations. The plot shows the
  different hydrographs at the channel outlet generated by the 50 different simulations.
* The x-axis shows the time and z-axis the discharge. The y-axis corresponds 
  to rain intensity. The initial soil saturation theta_i is indicated by the
  different color tones. The red frame indicates the end of the rain events. From there
  all hydrographs start to recess.
* We can notice that some rain events produced absolutely no channel discharge.
* Those with high initial soil saturation reached their peak discharge very fast.
* Many hydrographs show an interesting behavior: a first plateau after some time,
  where it seems that discharge won't grow any more, followed by one or two bumpy 
  increases. These bumps are given by the topography. Two droplets at the same distance
  from the outlet don't necessary have the same travel time. Those coming from
  the "Gaussian mountains" will travel faster due to the slope. Those bumps are then
  given by the water from the "plain" which is arriving later.
### 13
Dataset extraction CS 2
* The emulator we want to build should estimate the time needed by a given
  rain event to generate the channel threshold discharge.
* For this a threshold has to be chosen.
* Here we can see, that depending on the threshold value Q! that we select,
  the time-to-threshold t! can vary enormously: in the hydrograph raising limb
  region fair variations of Q-threshold have almost no effect.
* In the plateau region shown here by the two black lines the opposite is true:
  a very small variation of the threshold value causes huge sudden variations 
  of the time-to-threshold.
* We conclude that the time-to-threshold is a very discontinuous quantity,
  which is therefore very challenging to emulate.
### 14
Classification CS 2
* In order to simplify the emulation task we first built a classifier 
### 15
Emulator CS 2
### 16
Conclusion
